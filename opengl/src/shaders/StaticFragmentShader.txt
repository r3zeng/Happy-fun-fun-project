#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitSurface = normalize(toLightVector);
	
	float nDot = dot(unitNormal, unitSurface);
	float brightness = max (nDot, 0.0);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitCamera = normalize(toCameraVector);
	vec3 reflectedLight = (-unitSurface, unitSurface );
	
	float specularBrightness = dot(reflectedLight, unitCamera);
	specularBrightness = max(specularBrightness, 0.0);
	float dampenedBrightness = pow(specularBrightness, shineDamper);
	vec3 specularFinal = dampenedBrightness * reflectivity * lightColor;
	
	out_Color = texture(textureSampler, pass_textureCoords)/12 + (vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4(specularFinal, 1.0));
	
}