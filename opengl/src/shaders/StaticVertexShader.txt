#version 400 core

in vec3 position;
in vec3 normal;

out vec3 surfaceNormal;
out vec3 toLightVector1;
out vec3 toLightVector2;
out vec3 toLightVector3;
out vec3 toLightVector4;
out vec3 toLightVector5;
out vec3 toLightVector6;
out vec3 toCameraVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition1;
uniform vec3 lightPosition2;
uniform vec3 lightPosition3;
uniform vec3 lightPosition4;
uniform vec3 lightPosition5;
uniform vec3 lightPosition6;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position, 1.0 );
	gl_Position =  projectionMatrix * viewMatrix * worldPosition;
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	toLightVector1 = lightPosition1 - worldPosition.xyz;
	toLightVector2 = lightPosition2 - worldPosition.xyz;
	toLightVector3 = lightPosition3 - worldPosition.xyz;
	toLightVector4 = lightPosition4 - worldPosition.xyz;
	toLightVector5 = lightPosition5 - worldPosition.xyz;
	toLightVector6 = lightPosition6 - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz -worldPosition.xyz;
}